// Skeleton

// FUNCTION DEFINITION(S)
function findLongestPalindrome(sentence) {
  // split sentence into words
  // iterate words and collect the palindromes
  // sort the list of palindromes by word length
  // return the largest item in the sorted list
  let words = [];
  words = sentence.split(' ');
  let palindromes = [];
  for (var i = 0; i < words.length; i++) {
      if (isPalindrome(words[i])) {
          palindromes.push(words[i]);
      }
  }
  var sortedPalindromes = palindromes.sort(sortAscendingByLength);
  var longestPalindrome = sortedPalindromes.pop();
  return longestPalindrome;
}


function reverseString(string) {
  let reverse = '';
  for (var i = string.length - 1; i > -1; i--) {
      reverse += string[i];
  }
  return reverse;
}

function isPalindrome(word) {
  // hint: you can detect palindromes by comparing a string to its reverse
  return (word === reverseString(word)) ? true : false;
}

function sortAscendingByLength(a, b) {
  if (a.length > b.length) {
    return 1;
  } else if (a.length < b.length) {
    return -1;
  }
  return 0;
}

// ASSERTION FUNCTION(S) TO BE USED
function assertEqual (actual, expected, testName) {
    if (actual.toLowerCase() === expected.toLowerCase()) {
        console.log(`passed [${testName}]`);
    } else {
        console.log(`FAILED [${testName}], expected "${expected}" but got "${actual}"`);
    }
}

// TESTS CASES
let sentence1 = 'neveroddoreven ana racecar';
let sentence2 = 'NaNaN AnAnA';
assertEqual(findLongestPalindrome(sentence1), 'neveroddoreven', 'should find the longest palindrome');
assertEqual(findLongestPalindrome(sentence2), 'anana', 'should find the longest palindrome');

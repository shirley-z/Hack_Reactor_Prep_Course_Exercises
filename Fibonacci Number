// Compute the nth Fibonacci Number: The fibonacci numbers are represented by the following sequence:

// fib(n): 1 1 2 3 5 8 13 21
//         | | | | | |  |  |
//      n: 0 1 2 3 4 5  6  7
// That is, fib(0) is 1, fib(1) is 1, fib(2) is 2, fib(3) is 3, fib(4) is 5, etc.

// Notice that each fibonacci number can be computed by adding the previous two fibonacci numbers, with the exception of the first two: fib(0) and fib(1). More succinctly,

// fib(0) is 1
// fib(1) is 1
// fib(n) is fib(n - 1) + fib(n - 2)
// Write a function called fib that accepts a number n as a parameter and computes the nth fibonacci number using the above rules.

/* While Loop */
var fib = function(n) {
  if(n === 0 || n === 1) {
    return 1;
  }
  var index = 2;
  var fibNum = [1, 1];
  while (index <= n) {
    fibNum.push(fibNum[index-1] + fibNum[index-2]);
    index++;
  }
  return fibNum[n];
};

fib(7); // 21


/ * Recursion */
// Return the Fibonacci number located at index n of the Fibonacci sequence.
// [0,1,1,2,3,5,8,13,21]
// nthFibo(5); // 5
// nthFibo(7); // 13
// nthFibo(3); // 2
var nthFibo = function(n) {
  if (n === 0) {
    return 0;
  }
  if (n === 2 || n === 1) {
    return 1;
  }
  if (n < 0) {
    return null;
  }
  return nthFibo(n-1) + nthFibo(n-2);
};

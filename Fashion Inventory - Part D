/*
You have a fashion catalog, an inventory of items from various high-fashion designers. Each designer has a lineup of shoes. Each shoe has a name and a price.

It looks like this:

var currentInventory = [
  {
    name: 'Brunello Cucinelli',
    shoes: [
      {name: 'tasselled black low-top lace-up', price: 1000},
      {name: 'tasselled green low-top lace-up', price: 1100},
      {name: 'plain beige suede moccasin', price: 950},
      {name: 'plain olive suede moccasin', price: 1050}
    ]
  },
  {
    name: 'Gucci',
    shoes: [
      {name: 'red leather laced sneakers', price: 800},
      {name: 'black leather laced sneakers', price: 900}
    ]
  }
];
1
004_FashionInventoryPart-D.md
Submitted on Today at 5:31 PM
The task now is to find all the laced shoes, but we are going to render them in a somewhat complex format. Your function should return shoe names that contain "lace" in them, and indicate which word contains "lace". The return value's format should be structured like this:

var expectedResult = [
  {
    "nameWords": [
      "tasselled",
      "black",
      "low-top",
      "lace-up"
    ],
    "targetWordIndex": 3
  },
  {
    "nameWords": [
      "tasselled",
      "green",
      "low-top",
      "lace-up"
    ],
    "targetWordIndex": 3
  },
  {
    "nameWords": [
      "red",
      "leather",
      "laced",
      "sneakers"
    ],
    "targetWordIndex": 2
  },
  {
    "nameWords": [
      "black",
      "leather",
      "laced",
      "sneakers"
    ],
    "targetWordIndex": 2
  }
];
There are no tests attached to this exercise. In order to get the most effective practice, please continue to write your own unit tests.
*/




function generateLaceDetails(inventory) {
    let container = [];

    for (var i = 0; i < inventory.length; i++) {
      for (var j = 0; j < inventory[i].shoes.length; j++) {
        let shoeObj = {};
        let words = inventory[i].shoes[j].name.split(' ');
        let targetIndex = null;
        for (var k = 0; k < words.length; k++) {
          if (words[k].indexOf('lace') > -1) {
            targetIndex = k;
          }
        }
        // let targetIndex = words.indexOf('lace');
        if (targetIndex !== null) {
          shoeObj['nameWords'] = words;
          shoeObj['targetWordIndex'] = targetIndex;
          container.push(shoeObj);
        }
      }
    }
    return container;
}

// TEST
function assertFormatEqual(actual, expected, testName) {
  if (JSON.stringify(actual) === JSON.stringify(expected)) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected:\n\n"${JSON.stringify(expected)}" \n\nbut actually got:\n\n"${JSON.stringify(actual)}"`);
  }
}

var currentInventory = [
  {
    name: 'Brunello Cucinelli',
    shoes: [
      {name: 'tasselled black low-top lace-up', price: 1000},
      {name: 'tasselled green low-top lace-up', price: 1100},
      {name: 'plain beige suede moccasin', price: 950},
      {name: 'plain olive suede moccasin', price: 1050}
    ]
  },
  {
    name: 'Gucci',
    shoes: [
      {name: 'red leather laced sneakers', price: 800},
      {name: 'black leather laced sneakers', price: 900}
    ]
  }
];

var expectedResult = [
  {
    "nameWords": [
      "tasselled",
      "black",
      "low-top",
      "lace-up"
    ],
    "targetWordIndex": 3
  },
  {
    "nameWords": [
      "tasselled",
      "green",
      "low-top",
      "lace-up"
    ],
    "targetWordIndex": 3
  },
  {
    "nameWords": [
      "red",
      "leather",
      "laced",
      "sneakers"
    ],
    "targetWordIndex": 2
  },
  {
    "nameWords": [
      "black",
      "leather",
      "laced",
      "sneakers"
    ],
    "targetWordIndex": 2
  }
];

assertFormatEqual(generateLaceDetails(currentInventory), expectedResult, 'formats should equal');

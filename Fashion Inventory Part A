/*
You have a fashion catalog, an inventory of items from various high-fashion designers. Each designer has a lineup of shoes. Each shoe has a name and a price.

It looks like this:

var currentInventory = [
  {
    name: 'Brunello Cucinelli',
    shoes: [
      {name: 'tasselled black low-top lace-up', price: 1000},
      {name: 'tasselled green low-top lace-up', price: 1100},
      {name: 'plain beige suede moccasin', price: 950},
      {name: 'plain olive suede moccasin', price: 1050}
    ]
  },
  {
    name: 'Gucci',
    shoes: [
      {name: 'red leather laced sneakers', price: 800},
      {name: 'black leather laced sneakers', price: 900}
    ]
  }
];

Write a function that will take in this currentInventory array as its argument. Your function should access all the shoes across each designer and 
return them out in a flat list: {designer name} - {shoe name} - {price}{designer name} - {shoe name} - {price}

//...console output:
Brunello Cucinelli, tasselled black low-top lace-up, 1000
Brunello Cucinelli, tasselled green low-top lace-up, 1100
// and so on...
Here is an example of a flat list in code:

var flatList = "First line\nSecond Line\nThird Line";
console.log(flatList);
Observe that a "flat list" refers to a string where each new line is separated by the newline symbol. Also note that the "flat list" does not end with a newline symbol.
*/

function renderInventory(inventory) {
  let flatList = '';

  for (var i = 0; i < inventory.length; i++) {
      for (var j = 0; j < inventory[i].shoes.length; j++) {
        let line = inventory[i].name + ', ';
        line += inventory[i].shoes[j].name + ', ';
        line += inventory[i].shoes[j].price;
        if (i === (inventory.length - 1) && j === (inventory[i].shoes.length - 1)) {
          flatList += line;
        } else {
          flatList += line + '\n';
        }
      } 
  }

  return flatList;
}

function getDesignerName(designerSet) {
    return designerSet.name;
}

// TEST SUITE
function assert(actual, expected, testName) {
  // if (actual.toString().length !== expected.toString().length) {
  //   return console.log(`FAILED [${testName}] Size of actual result and expected result are not equal.`);
  // }
  if (JSON.stringify(actual) === JSON.stringify(expected)) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected \n\n"${JSON.stringify(expected)}" \n\nbut got \n\n"${JSON.stringify(actual)}"`);
  }
}

var currentInventory = [
  {
    name: 'Brunello Cucinelli',
    shoes: [
      {name: 'tasselled black low-top lace-up', price: 1000},
      {name: 'tasselled green low-top lace-up', price: 1100},
      {name: 'plain beige suede moccasin', price: 950},
      {name: 'plain olive suede moccasin', price: 1050}
    ]
  },
  {
    name: 'Gucci',
    shoes: [
      {name: 'red leather laced sneakers', price: 800},
      {name: 'black leather laced sneakers', price: 900}
    ]
  }
];

let actualResult = renderInventory(currentInventory);

let expectedResult = `Brunello Cucinelli, tasselled black low-top lace-up, 1000
Brunello Cucinelli, tasselled green low-top lace-up, 1100
Brunello Cucinelli, plain beige suede moccasin, 950
Brunello Cucinelli, plain olive suede moccasin, 1050
Gucci, red leather laced sneakers, 800
Gucci, black leather laced sneakers, 900`;

assert(actualResult, expectedResult, 'output should equal');
